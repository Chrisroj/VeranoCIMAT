btc %>% ggplot(aes(x = date, y = close)) +
geom_line() +
theme_classic() +
labs(x = 'Date',
y = "Adjusted Price",
title = "Apple price chart")
library(dplyr)
library(tidyquant) # BTC historic
library(ggplot2)
library(dplyr)
# Get daily prices of BTC
btc <- tq_get('BTC-USD',
to = "2020-06-22",
get = "stock.prices")
str(btc)
head(btc)
print(sum(is.na(btc)))
print(which(is.na(btc$low)))
btc[(2040 - 2):(2040 + 2),]
# 2020-04-17 is missing, we need to change the date
# Get daily prices of BTC
btc <- tq_get('BTC-USD',
to = "2020-04-01",
get = "stock.prices")
str(btc)
print(sum(is.na(btc)))
btc %>% ggplot(aes(x = date, y = close)) +
geom_line() +
theme_classic() +
labs(x = 'Date',
y = "Adjusted Price",
title = "Apple price chart")
# OPTIONS
ar_lag <- 0 # lag used for ar term in mean equation (0 in paper)
ma_lag <- 0 # lag used for ma term in mean equation (0 in paper)
arch_lag <- 1 # lag in arch effect (1 in paper)
garch_lag <- 1 # lag in garch effect (1 in paper)
models_to_estimate <- c('sGARCH', 'eGARCH', 'gjrGARCH') # see rugarch manual for more
distribution_to_estimate <- 'norm' # distribution used in all models
my_html_file <- 'tabs/tab04-estimation_garch.html' # where to save html file?
library(tidyverse)
library(FinTS)
library(texreg)
library(rugarch)
# close all opened windows
graphics.off()
# change working directory
my_d <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(my_d)
# source functions
source('fcts/garch_fcts.R')
# get all combinations of models
df_grid <- expand_grid(ar_lag,
ma_lag,
arch_lag,
garch_lag,
models_to_estimate,
distribution_to_estimate)
# get price data
df_prices <- read_rds('data/RAC-GARCH-Data.rds')
setwd("C:/Users/ferro/Desktop/VeranoCIMAT/AnÃ¡lisis de Sentimiento/Literatura/A GARCH Tutorial with R/GARCH-RAC-master")
setwd(my_d)
# source functions
source('fcts/garch_fcts.R')
# get all combinations of models
df_grid <- expand_grid(ar_lag,
ma_lag,
arch_lag,
garch_lag,
models_to_estimate,
distribution_to_estimate)
# OPTIONS
ar_lag <- 0 # lag used for ar term in mean equation (0 in paper)
ma_lag <- 0 # lag used for ma term in mean equation (0 in paper)
arch_lag <- 1 # lag in arch effect (1 in paper)
garch_lag <- 1 # lag in garch effect (1 in paper)
models_to_estimate <- c('sGARCH', 'eGARCH', 'gjrGARCH') # see rugarch manual for more
distribution_to_estimate <- 'norm' # distribution used in all models
my_html_file <- 'tabs/tab04-estimation_garch.html' # where to save html file?
library(tidyverse)
library(FinTS)
library(texreg)
library(rugarch)
# close all opened windows
graphics.off()
# change working directory
my_d <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(my_d)
# source functions
source('fcts/garch_fcts.R')
# get all combinations of models
df_grid <- expand_grid(ar_lag,
ma_lag,
arch_lag,
garch_lag,
models_to_estimate,
distribution_to_estimate)
install.packages("tidyverse")
install.packages("texreg")
library(tidyverse)
library(FinTS)
library(texreg)
library(rugarch)
# close all opened windows
graphics.off()
# change working directory
my_d <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(my_d)
# source functions
source('fcts/garch_fcts.R')
# get all combinations of models
df_grid <- expand_grid(ar_lag,
ma_lag,
arch_lag,
garch_lag,
models_to_estimate,
distribution_to_estimate)
View(df_grid)
View(df_grid)
# get price data
df_prices <- read_rds('data/RAC-GARCH-Data.rds')
estimate_garch <- function(ar_lag,
ma_lag,
arch_lag,
garch_lag,
models_to_estimate,
distribution_to_estimate) {
message('Estimating ARMA(',ar_lag,',', ma_lag, ')', '-',
models_to_estimate, '(', arch_lag, ',', garch_lag, ') ',
'dist = ', distribution_to_estimate)
# estimate model
my_spec <- ugarchspec(variance.model = list(model = models_to_estimate,
garchOrder = c(arch_lag,
garch_lag)),
mean.model = list(armaOrder = c(ar_lag,
ma_lag)),
distribution.model = distribution_to_estimate)
my_garch <- ugarchfit(spec = my_spec, data = df_prices$log_ret)
return(my_garch)
}
# estimate all models
l_args <- as.list(df_grid)
View(l_args)
l_models <- pmap(.l = l_args, .f = estimate_garch)
# make sure dir "tabs" exists
if (!dir.exists('tabs')) dir.create('tabs')
# reformat models for texreg
l_models <- map(l_models, extract.rugarch, include.rsquared = FALSE)
View(l_models)
# write custom row
custom_row <- list('Variance Model' = df_grid$models_to_estimate,
'Distribution' = df_grid$distribution_to_estimate)
custom_names <- paste0('Model ', 1:length(l_models))
# save to html
htmlreg(l_models,
file = my_html_file,
custom.gof.rows = custom_row,
custom.model.names = custom_names,
digits = 3)
# print to screen
screenreg(l_models,
custom.gof.rows = custom_row,
custom.model.names = custom_names,
digits = 3)
View(l_models)
View(l_models)
library(tidyr)
expand_grid(a = c(0,1), b = c(0,1))
?expand_grid
expand_grid(a = c(0,1), b = c(0,1), c = c("a", "b"))
